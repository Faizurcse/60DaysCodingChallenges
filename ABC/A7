You are given an array A, of N elements. Find minimum index based distance between two elements of the array, x and y such that (x!=y).

Example 1:

Input:
N = 4
A[] = {1,2,3,2}
x = 1, y = 2
Output: 1
Explanation: x = 1 and y = 2. There are
two distances between x and y, which are
1 and 3 out of which the least is 1.
Example 2:

Input:
N = 7
A[] = {86,39,90,67,84,66,62}
x = 42, y = 12
Output: -1
Explanation: x = 42 and y = 12. We return
-1 as x and y don't exist in the array.
Your Task:
Complete the function minDist() which takes the array, n, x and y as input parameters and returns the minimum distance between x and y in the array. If no such distance is possible then return -1.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)


program///

class Solution {
    int minDist(int a[], int n, int x, int y) {
        // code here
        int k = -1;
        int j = -1;
        int min = Integer.MAX_VALUE;
        int i = 0;
        while(i<n){
            if(a[i]==x){
                k=i;
            }
            if(a[i]==y){
                j=i;
            }
            i++;
            if(k!=-1 && j!=-1){
                min = Math.min(min,Math.abs(k-j));
            }
        }
        if(k==-1||j==-1){
            return-1;
        }
        return min;
    }
}
