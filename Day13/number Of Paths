The task is to count all the possible paths from top left to bottom right of a m X n matrix with the constraints that from each cell you can either 
move only to right or down.

Example 1:

Input: m = 2, n = 2
Output: 2 
Explanation: Two possible ways are
RD and DR. 

//code....


class Solution
{
        static long numberOfPaths(int m, int n)
      {
          long mod=1000000007;
       long dp[][]= new long[m][n];
        for(int i=0;i<m;i++){
            dp[i][0]=1;
        }
          for(int j=0;j<n;j++){
            dp[0][j]=1;
        }
       for(int i=1;i<m;i++){
           for(int j=1;j<n;j++){
               dp[i][j]=(dp[i-1][j]%mod+dp[i][j-1]%mod)%mod;
           }
       }
       return dp[m-1][n-1];
    }
}
